--[[--
	Functions contained within the promise namespace aids in writing lazily evaluated objects.
	Objects created by promises are usually bearers of certain conditions that allows object creation
	to be deferred until all of the pieces of the puzzle are present.

	@VOLATILE API, subjected to change so do not use unless necessary. These are useful for defining
	new field types for Rocket models.
--]]--

promise = {} -- Namespace

--~ Developer's Note:
--~ The return values of any given promise is implemented as a callable userdata.
--~ The idea behind this is that userdata can be associated with a __gc metamethod
--~ to alert the model of its own garbage collection. This will probably change in the future.

--=--=--=--=--=--=--=--=--=--=--=--=--=--

--~ Promise.type returns a validator for a specific lua type. It also incorporates integers.
--~ @param _type in "string", "boolean", "table", "number", and "int"
--~ @param default is an instance of type '_type'
--~ @return callable that will return nil if the object passed in does not satisfy type condition
function promise.type(_type, default)
	local validator = newproxy(true)
	local mt = getmetatable(validator)
	function mt.__call(self,object)
		if object == nil then
			return default
		end
		if type(object) == _type or _type == "*" then
			return object
		elseif type(object) == "number" and _type == "int" then
			if object == math.floor(object) then return object end
		else
			return nil
		end
	end
	mt.__index = {default=default}
	return validator
end

--~ Promise.constant returns a validator that checks to see if an object == the constant
--~ @param constant is the constant that the validator checks against
--~ @return callable that will return nil if the object passed in does not equal the constant
function promise.constant(constant)
	local validator = newproxy(true)
	local mt = getmetatable(validator)
	function mt.__call(self,object)
		if object == constant then
			return object
		end
	end
	return validator
end

--~ Promise.field returns a field validator that checks if an evaluated field fulfills all of the promises.
--~ @param promises is a keyed table (hash if you will) of field flags versus a promise validator (see above two functions) that can be generated by promise.type or constant or even handwritten.
--~ @return callable that will evaluate a field object and return nil if the field does not satisfy any of the promises.
function promise.field(promises)
	--print(dump(promises))
	--VALIDATOR
	local validator = newproxy(true)
	local mt = getmetatable(validator)
	function mt.__call(self, object)
		if promises.default then
			if object == nil then return self(promises.default) end
		end
		if promises.null then
			if object == nil then return nil end
		else
			if object == nil then return nil end
		end
		if promises.promise then
			if promises.promise(object, promises) then
				return object
			else
				return nil
			end
		end

		return object
	end
	mt.__index = promises
	function mt.__index.params()
		return pairs(mt.__index)
	end
	function mt.__newindex(self, k, v)
		if k == "name" then mt.__index.name = v end
	end
	function mt.__tostring(self)
		return "<VALIDATOR>"
	end
	return validator
end
